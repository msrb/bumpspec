#!/bin/bash -e

# Copyright (c) 2016 Michal Srb
#
# This software is provided 'as-is', without any express or implied
# warranty. In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
#
# 2. Altered source versions must be plainly marked as such, and must not be
#    misrepresented as being the original software.
#
# 3. This notice may not be removed or altered from any source
#    distribution.


function usage {
    echo "Usage: "`basename "$0"`" [-r] [-h] [-f specfile] [changelog message]"
    echo
    echo "    -r           bump trailing .<DIGIT> component if found, append .1 if not"
    echo "    -f SPECFILE  spec file to work with, defaul: *.spec"
    echo "    -h           show this help and quit"
}

specfile="*.spec"
bumpminor=
chlogmessage="Rebuilt"

while [[ $# -ne 0 ]]; do

    case "$1" in
        "-f")
            if [[ $# -ge 2 ]]; then
                specfile="$2"
                shift 2
                continue
            fi
            echo "-f: missing argument" 1>&2
            usage
            exit 1
            ;;
        "-r")
            bumpminor=yes
            shift
            ;;
        "-h")
            usage
            exit 0
            ;;
        *)
            if [[ $# -eq 1 ]]; then
                chlogmessage="$1"
                shift
                continue
            fi
            echo "Unknown parameter: $1" 1>&2
            usage
            exit 1
    esac
done


if [ ! -f ${specfile} ]; then
    echo "$specfile: no such file" 1>&2
    exit 1
fi

# get information (name, email) about current user
havegit=`type git &> /dev/null; echo $?`
if [[ $havegit -eq 0 ]]; then
    username=`git config --get user.name`
    email=`git config --get user.email`
elif [[ -f "${HOME}/.gitconfig" ]]; then
    username=`sed -n 's/\s*name\s*=\s*\(.*\)\s*/\1/p' ${HOME}/.gitconfig`
    email=`sed -n 's/\s*email\s*=\s*\(.*\)\s*/\1/p' ${HOME}/.gitconfig`
elif [[ -z $username ]]; then
    username=${USER}
fi

version=`rpmspec -P ${specfile} | sed -n 's/\s*Version:\s*\(.*\)$/\1/p'`
epoch=`rpmspec -P ${specfile} | sed -n 's/\s*Epoch:\s*\(.*\)$/\1/p'`
if [[ -n $epoch ]]; then
    epoch=${epoch}:
fi

release=`sed -n 's|^Release:\s*\(.*\)|\1|p' ${specfile}`
disttag=
if [[ $release == *\%{?dist} ]]; then
    release=`sed -n 's/Release:\s*\([^ ]\+\)%{?dist}$/\1/p' ${specfile}`
    disttag=%{?dist}
fi

# extract major release number
major=`echo ${release} | sed -n 's/^\([0-9]\+\).*/\1/p'`
# extract minor release number (if any)
minor=`echo ${release} | sed -n 's|.*\.\([0-9]\+\)$|\1|p'`

nextmajor=$major
nextminor=$minor

if [[ -z $bumpminor ]]; then
    nextmajor=$((major + 1))
else
    # bump minor
    if [[ -n $minor ]]; then
        nextminor=$((minor + 1))
    else
        nextminor=".1"
        minoradded=yes
    fi
fi

newrel="${nextmajor}${release#$major}"
if [[ -z $minoradded ]]; then
    newrel="${newrel%$minor}${nextminor}"
else
    newrel="${newrel}${nextminor}"
fi

# bump release
sed -i "s/^\(Release:\s*\).*/\1$newrel$disttag/" ${specfile}

fullrel=`rpmspec -P ${specfile} | sed -n 's/\s*Release:\s*\(.*\)\..*$/\1/p'`

logheader="* `LC_ALL=en_us.utf-8 date +'%a %b %d %Y'` $username <$email> - $epoch$version-$fullrel"

# add changelog entry
sed -i "/^%changelog/ a\\$logheader\n- $chlogmessage\n" ${specfile}

